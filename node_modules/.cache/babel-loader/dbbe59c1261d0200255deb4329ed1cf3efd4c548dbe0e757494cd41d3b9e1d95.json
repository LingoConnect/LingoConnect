{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = \"http://localhost:8080\";\nexport const getFeedback = async ({\n  gptTitle,\n  gptQuestion,\n  gptUserAnswer\n}) => {\n  try {\n    console.log(gptTitle, gptQuestion, gptUserAnswer);\n    const encodedTitle = encodeURIComponent(gptTitle);\n    const encodedQuestion = encodeURIComponent(gptQuestion);\n    const encodedUserAnswer = encodeURIComponent(gptUserAnswer);\n    const response = await axios.get(`${BASE_URL}/openai/?title=${encodedTitle}&question=${encodedQuestion}&userAnswer=${encodedUserAnswer}`, {\n      gptTitle,\n      gptQuestion,\n      gptUserAnswer\n    }, {\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    return {\n      status: response.status,\n      data: response.data\n    };\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.reposne) {\n      const {\n        status,\n        data\n      } = error.response;\n      console.error(`Error ${status}`);\n      return {\n        status\n      };\n    } else {\n      console.error('Unknown error occurred.');\n      return {\n        status: 500,\n        data: null\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","getFeedback","gptTitle","gptQuestion","gptUserAnswer","console","log","encodedTitle","encodeURIComponent","encodedQuestion","encodedUserAnswer","response","get","headers","status","data","error","isAxiosError","reposne"],"sources":["/Users/leeyena/web-project/LingoConnect_frontend/src/api/chat_api.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = \"http://localhost:8080\";\n\nexport const getFeedback = async ({ gptTitle, gptQuestion, gptUserAnswer }) => {\n    try {\n        console.log(gptTitle, gptQuestion, gptUserAnswer);\n        const encodedTitle = encodeURIComponent(gptTitle);\n        const encodedQuestion = encodeURIComponent(gptQuestion);\n        const encodedUserAnswer = encodeURIComponent(gptUserAnswer);\n        const response = await axios.get(`${BASE_URL}/openai/?title=${encodedTitle}&question=${encodedQuestion}&userAnswer=${encodedUserAnswer}`,\n            {\n                gptTitle,\n                gptQuestion,\n                gptUserAnswer\n            },\n            {\n                headers: {\n                    'Accept': 'application/json',\n                }\n            }\n        )\n        return { status: response.status, data: response.data };\n    } catch (error) {\n        if (axios.isAxiosError(error) && error.reposne) {\n            const { status, data } = error.response;\n            console.error(`Error ${status}`);\n            return { status };\n        } else {\n            console.error('Unknown error occurred.');\n            return { status: 500, data: null };\n        }\n    }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,uBAAuB;AAExC,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAO;EAAEC,QAAQ;EAAEC,WAAW;EAAEC;AAAc,CAAC,KAAK;EAC3E,IAAI;IACAC,OAAO,CAACC,GAAG,CAACJ,QAAQ,EAAEC,WAAW,EAAEC,aAAa,CAAC;IACjD,MAAMG,YAAY,GAAGC,kBAAkB,CAACN,QAAQ,CAAC;IACjD,MAAMO,eAAe,GAAGD,kBAAkB,CAACL,WAAW,CAAC;IACvD,MAAMO,iBAAiB,GAAGF,kBAAkB,CAACJ,aAAa,CAAC;IAC3D,MAAMO,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,GAAGZ,QAAQ,kBAAkBO,YAAY,aAAaE,eAAe,eAAeC,iBAAiB,EAAE,EACpI;MACIR,QAAQ;MACRC,WAAW;MACXC;IACJ,CAAC,EACD;MACIS,OAAO,EAAE;QACL,QAAQ,EAAE;MACd;IACJ,CACJ,CAAC;IACD,OAAO;MAAEC,MAAM,EAAEH,QAAQ,CAACG,MAAM;MAAEC,IAAI,EAAEJ,QAAQ,CAACI;IAAK,CAAC;EAC3D,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,IAAIjB,KAAK,CAACkB,YAAY,CAACD,KAAK,CAAC,IAAIA,KAAK,CAACE,OAAO,EAAE;MAC5C,MAAM;QAAEJ,MAAM;QAAEC;MAAK,CAAC,GAAGC,KAAK,CAACL,QAAQ;MACvCN,OAAO,CAACW,KAAK,CAAC,SAASF,MAAM,EAAE,CAAC;MAChC,OAAO;QAAEA;MAAO,CAAC;IACrB,CAAC,MAAM;MACHT,OAAO,CAACW,KAAK,CAAC,yBAAyB,CAAC;MACxC,OAAO;QAAEF,MAAM,EAAE,GAAG;QAAEC,IAAI,EAAE;MAAK,CAAC;IACtC;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}