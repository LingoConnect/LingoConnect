{"ast":null,"code":"var _jsxFileName = \"/Users/leeyena/web-project/LingoConnect_frontend/src/pages/practice.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/practice.css';\nimport { getFeedback } from '../api/chat_api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Practice() {\n  _s();\n  const {\n    topic,\n    question\n  } = useParams();\n  const [answerInput, setAnswerInput] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const decodedTopic = decodeURIComponent(topic);\n  const decodedQuestion = decodeURIComponent(question);\n  const handleFeedback = async () => {\n    if (answerInput.trim() !== '') {\n      // const gptTitle = \"주제: \" + decodeURIComponent(topic) + \"\\n\";\n      // const gptQuestion = \"친구: \" + decodeURIComponent(question) + \"\\n\";\n      // const gptUserAnswer = \"사용자: \" + answerInput;\n      const gptTitle = \"주제: \" + decodeURIComponent(topic) + \"\\n\";\n      const gptQuestion = \"친구: \" + decodeURIComponent(question) + \"\\n\";\n      const gptUserAnswer = \"사용자: \" + answerInput;\n      console.log(gptTitle, gptQuestion, gptUserAnswer);\n      const response = await getFeedback({\n        gptTitle,\n        gptQuestion,\n        gptUserAnswer\n      });\n      if (response.status === 200) {\n        console.log(response.data);\n        setFeedback(response.data);\n      } else {\n        alert(\"error\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"practice-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: decodedTopic\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question\",\n      children: decodedQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer\",\n      children: answerInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feecback\",\n      children: \"feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: event => setAnswerInput(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFeedback,\n      children: \"\\uC804\\uC1A1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n_s(Practice, \"tnqtSSKWC0yi4oAlwt7perhfMMc=\", false, function () {\n  return [useParams];\n});\n_c = Practice;\nvar _c;\n$RefreshReg$(_c, \"Practice\");","map":{"version":3,"names":["React","useState","useParams","getFeedback","jsxDEV","_jsxDEV","Practice","_s","topic","question","answerInput","setAnswerInput","feedback","setFeedback","decodedTopic","decodeURIComponent","decodedQuestion","handleFeedback","trim","gptTitle","gptQuestion","gptUserAnswer","console","log","response","status","data","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","event","target","value","onClick","_c","$RefreshReg$"],"sources":["/Users/leeyena/web-project/LingoConnect_frontend/src/pages/practice.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/practice.css';\nimport { getFeedback } from '../api/chat_api';\n\nexport default function Practice() {\n    const { topic, question } = useParams();\n    const [answerInput, setAnswerInput] = useState('');\n    const [feedback, setFeedback] = useState('');\n    const decodedTopic = decodeURIComponent(topic);\n    const decodedQuestion = decodeURIComponent(question);\n\n    const handleFeedback = async () => {\n        if (answerInput.trim() !== '') {\n            // const gptTitle = \"주제: \" + decodeURIComponent(topic) + \"\\n\";\n            // const gptQuestion = \"친구: \" + decodeURIComponent(question) + \"\\n\";\n            // const gptUserAnswer = \"사용자: \" + answerInput;\n            const gptTitle = \"주제: \" + decodeURIComponent(topic) + \"\\n\";\n            const gptQuestion = \"친구: \" + decodeURIComponent(question) + \"\\n\";\n            const gptUserAnswer = \"사용자: \" + answerInput;\n\n            console.log(gptTitle, gptQuestion, gptUserAnswer);\n            const response = await getFeedback({ gptTitle, gptQuestion, gptUserAnswer });\n            if (response.status === 200) {\n                console.log(response.data);\n                setFeedback(response.data);\n            } else {\n                alert(\"error\");\n            }\n        }\n    }\n\n    return (\n        <div className=\"practice-container\">\n            <div>{decodedTopic}</div>\n            <div className=\"question\">{decodedQuestion}</div>\n            <div className=\"answer\">{answerInput}</div>\n            <div className=\"feecback\">feedback</div>\n            <input onChange={(event) => setAnswerInput(event.target.value)}></input>\n            <button onClick={handleFeedback}>전송</button>\n        </div>\n    )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}