name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  backend-build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: lingo
          POSTGRES_PASSWORD: lingo
          POSTGRES_DB: lingoconnect
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U lingo"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: "21"
          distribution: "temurin"
          
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Gradle wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-wrapper-

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432 -U lingo; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
          
      - name: Make application-prod.yml
        if: contains(github.ref, 'main')
        run: |
          cd ./backend/src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.YML_PROD }}" > ./application-prod.yml
        shell: bash

      - name: Build the project
        working-directory: backend
        run: ./gradlew build --no-daemon
  backend-test:
    runs-on: ubuntu-latest
    needs: backend-build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: "21"
          distribution: "temurin"
          
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Gradle wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-wrapper-
      
      - name: Run Tests
        working-directory: backend
        run: ./gradlew test --no-daemon
  backend-deploy:
    runs-on: ubuntu-latest
    needs: backend-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and run Docker Compose
        working-directory: backend
        run: |
          docker-compose up --build -d

      - name: Tear down Docker Compose
        working-directory: backend
        run: docker-compose down


      # Uncomment the following lines when you're ready to deploy the backend
      # - name: Deploy Backend
      #   if: success()
      #   run: |
      #     # Deploy backend to AWS EC2
      #     scp -i /path/to/your-key.pem -r backend/target/*.jar ec2-user@your-backend-ec2-ip:/path/to/deployment/
      #     ssh -i /path/to/your-key.pem ec2-user@your-backend-ec2-ip "cd /path/to/deployment && java -jar your-backend-app.jar"

  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Install Dependencies
        working-directory: frontend
        run: npm install

      # Uncomment the following lines when you're ready to run frontend tests
      # - name: Run Frontend Tests
      #   working-directory: frontend
      #   run: npm test

      - name: Build Frontend
        working-directory: frontend
        run: npm run build

      # Uncomment the following lines when you're ready to deploy the frontend
      # - name: Deploy Frontend
      #   if: success()
      #   run: |
      #     # Deploy frontend to AWS S3 and invalidate CloudFront
      #     aws s3 sync LingoConnect_frontend/build s3://your-frontend-bucket/
      #     aws cloudfront create-invalidation --distribution-id YOUR_DISTRIBUTION_ID --paths "/*"
